# Adaptive Quality Gate CI/CD Pipeline
# Generated based on project structure and current quality gate phase
# Project: fullstack (generic)
# Phase: 0 - Baseline & Stabilization

name: Quality Gate - Phase 0 (generic)

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  QUALITY_GATE_PHASE: 0
  PROJECT_TYPE: 'generic'


# ==============================================
# PHASE 0: BASELINE & STABILIZATION
# ==============================================
# Strategy: Prevent regressions, document baseline
# Enforcement: Baseline tolerance with regression blocking
# Legacy: Issues allowed if documented in baseline








jobs:
  # Configuration Validation
  config-validation:
    name: "Phase 0: Configuration Validation"
    runs-on: ubuntu-latest
    outputs:
      has-frontend: ${{ steps.detect.outputs.has-frontend }}
      has-backend: ${{ steps.detect.outputs.has-backend }}
      frontend-path: ${{ steps.detect.outputs.frontend-path }}
      backend-path: ${{ steps.detect.outputs.backend-path }}
      changed-files: ${{ steps.changes.outputs.files }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Project Structure
        id: detect
        run: |
          chmod +x ./scripts/detect-project-type.sh
          ./scripts/detect-project-type.sh json > detection.json
          
          echo "has-frontend=$(jq -r '.project.has_frontend' detection.json)" >> $GITHUB_OUTPUT
          echo "has-backend=$(jq -r '.project.has_backend' detection.json)" >> $GITHUB_OUTPUT
          echo "frontend-path=$(jq -r '.project.frontend_path' detection.json)" >> $GITHUB_OUTPUT
          echo "backend-path=$(jq -r '.project.backend_path' detection.json)" >> $GITHUB_OUTPUT



      - name: "Phase 0: Show Quality Gate Context"
        run: |
          echo "🎯 Quality Gate Phase: 0"
          echo "📊 Strategy: Baseline & Stabilization"
          echo "🏗️  Project Type: generic"

          echo "📋 Phase 0 Focus: Baseline enforcement, prevent regressions"
          echo "⚡ Performance: Validate all code, establish/check baseline"









  # Security and Compliance
  security-validation:
    name: "Phase 0: Security Validation"
    runs-on: ubuntu-latest
    needs: config-validation

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: "Phase 0: Secret Detection"
        run: |
          echo "🔒 Phase 0: Secret detection validation"
          
          if command -v detect-secrets >/dev/null 2>&1; then
            if [[ -f ".secrets.baseline" ]]; then
              detect-secrets scan --baseline .secrets.baseline .
              echo "✅ No new secrets detected"
            else
              echo "⚠️  No secrets baseline found"
            fi
          else
            echo "⏭️  detect-secrets not available"
          fi





  # Quality Gate Summary
  quality-gate-summary:
    name: "Phase 0: Quality Gate Summary"
    runs-on: ubuntu-latest
    needs: [config-validation, security-validation]
    if: always()

    steps:
      - name: "Phase 0: Quality Gate Results"
        run: |
          echo "🎯 PHASE 0 QUALITY GATE SUMMARY"
          echo "=============================================="
          echo ""
          echo "📊 Project: fullstack (generic)"
          echo "🔄 Strategy: Baseline & Stabilization"
          echo ""





          if [[ "${{ needs.security-validation.result }}" == "success" ]]; then
            echo "✅ Security Validation: PASSED"
          else
            echo "❌ Security Validation: FAILED"
          fi

          echo ""
          echo "🛠️  Local Fix Instructions:"
          echo "• Run validation: ./scripts/validate-adaptive.sh"
          echo "• Fix issues: npm run lint:fix && ./scripts/format-backend.sh"
          echo "• Check phase: ./scripts/quality-gate-manager.sh status"
          echo "• Phase help: ./scripts/quality-gate-manager.sh help"

          # Check if critical jobs failed
          FAILED=false



          if [[ "$FAILED" == "true" ]]; then
            echo ""
            echo "❌ PHASE 0 QUALITY GATE FAILED"

            echo "📋 Phase 0: Quality regressions detected from baseline"
            echo "🔧 Action: Fix regressions to maintain baseline standards"




            exit 1
          else
            echo ""
            echo "✅ PHASE 0 QUALITY GATE PASSED!"

            echo "📊 Baseline quality maintained - ready for Phase 1"




          fi